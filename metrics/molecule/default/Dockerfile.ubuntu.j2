# Molecule managed

{% if item.registry is defined %}
FROM {{ item.registry.url }}/{{ item.image }}
{% else %}
FROM {{ item.image }}
{% endif %}
ENV container=docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

{% if item.environment.http_proxy is defined %}
RUN echo 'Acquire::http::Proxy "{{ item.environment.http_proxy }}";' > /etc/apt/apt.conf.d/99proxy
{% endif %}

# Systemd container

RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list

RUN apt-get update \
    && apt-get install -y systemd systemd-sysv \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN cd /lib/systemd/system/sysinit.target.wants/ \
    && ls | grep -v systemd-tmpfiles-setup | xargs rm -f $1

RUN rm -f /lib/systemd/system/multi-user.target.wants/* \
    /etc/systemd/system/*.wants/* \
    /lib/systemd/system/local-fs.target.wants/* \
    /lib/systemd/system/sockets.target.wants/*udev* \
    /lib/systemd/system/sockets.target.wants/*initctl* \
    /lib/systemd/system/basic.target.wants/* \
    /lib/systemd/system/anaconda.target.wants/* \
    /lib/systemd/system/plymouth* \
    /lib/systemd/system/systemd-update-utmp*

# Ansible
RUN apt-get update \
	&& apt-get install -y \
		python3 sudo bash \
		ca-certificates \
		iproute2 iptables \
		python3-apt aptitude \
		gpg software-properties-common \
	&& apt-get clean \
	&& rm -rf /var/lib/apt/lists/*

# Start

VOLUME [ "/sys/fs/cgroup" ]
CMD ["/lib/systemd/systemd"]
